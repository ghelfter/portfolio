Galen Helfter (ghelfter@gmail.com, ghelfte@clemson.edu)

CPSC 4040
Final Project
Readme

Description:

    The point file for the initial Nicholas Cage image can be generated by
    running the program with the -su flag or the -so flag (with a filename
    given) and then moving the file to the ./config/default_in_points.txt
    file, but I have already done that.

    I have also already generated a set of points that will work with the
    -ip flag, stored in ./config/input_points.txt.

    The image files I generated using these points are stored in the
    ./images/results/img_x.png files, and can be viewed. 

    The program implements the Beier-Neely algorithm in order to do what is
    necessary for the world and mix Nicholas Cage with any given image of the
    same size.

    Point File:
      The program accepts a file containing the point information for the image.
      The file is organized as only a space separated list, represented as an
      x and a y position. The segments are listed in the order they are
      processed, so the first one listed will correspond to the first segment
      given by the user in the program, et cetera.


      Ex. (Where P is the P component and Q is the Q component)
      P1x P1y
      Q1x Q1y
      P2x P2y
      Q2x Q2y
      .
      .
      .

    Use:
      The program displays a prompt to the user, describing the order to
      select the points in. They will be reiterated here:
         - Eyes
         - Nose
         - Eyebrows
         - Mouth
         - Left cheek (of the person in the image)
         - Right cheek
         - Chin
         - Hairline
         - Left head
         - Right head
         - Left Shoulder
         - Right shoulder


Implementation:
    The program uses the Beier-Neely algorithm to do facial transformations,
    with a linear interpolation of color and between warplines. It uses a
    cross-fade technique as the user cycles through the images.

    After all of the cross fade images are calculated, they are written to the
    images directory as img_x.png files.

    The program was written using C and C++.

Code Structure and Design:
    Needed libraries:
        SDL2
        OpenImageIO

    Source Files:
        cagifier.cpp - Contains the main function. Does most file IO
        rendering.cpp - Has the main application loop
        warpline.cpp - Has the class representing a line segment for the warp
        warping.cpp - Contains all of the functionality for a Beier-Neely warp
        ghelfter_matrix.cpp - Contains class methods for 3x3 matrix
        ghelfter_vector.cpp - Contains class methods for 3d Vector
        g_float.cpp - Contains class methods for the F_image class
        masking.c - Contains masking functions
        img_convert.cpp - Contains image converting functions
        user_input.cpp - Contains keyboard/mouse handlers

    Header Files:
        config.h - Contains some configuration information
        rendering.h - Contains functions definitions for main loop
        warpline.h - Contains Warpline class definition
        warping.h - Contains function definitions for Beier-Neely warping
        ghelfter_matrix.h - Contains class definition for 3x3 matrix
        ghelfter_vector.h - Contains class definition for 3d Vector
        g_float.h - Contains function definition for the F_image class
        masking.h - Contains masking function definitions
        img_convert.h - Contains image converting function definitions
        user_input.h - Contains keyboard/mouse handlers

Command Line Arguments:
    -op {fname} - Tells the program to output the points selected to the
                  given file to be read in later.
    -ip {fname} - Tells the program to use the given file as input points.
                  Doing this will not allow you to select points.
    -of {fname} - DEPRECATED
    -i  {fname} - Tells the program to use the specified file as the input
                  file, instead of the default one.
    -su         - Tells the program to output the points of the given program
                  to the default points file without actually doing the warping.
    -so {fname} - Same as su, only outputting to a given filename.

Keyboard Commands:
    Selecting Points:
      q - quit
    After Calculation
      q - quit 
      f - cycles through the calculated cross-faded images.

Deploying and Running:
    The program can be compiled by typing the following command:
        make

Extras Beyond Requirements:
    Switched the program to use SDL as the renderer. It displays nice colored dots
    where the user has clicked so that they can visually see the different points
    and where they correspond to.

Known Bugs/Issues:
    The program is only tested and made to work with files of the same size.

    The program does not display where the pixel came from when the mouse is
    clicked, but that is the only discrepency from the proposal.
